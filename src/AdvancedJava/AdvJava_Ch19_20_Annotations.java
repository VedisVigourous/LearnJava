package AdvancedJava;

class Information{
    java.util.Scanner input = new java.util.Scanner(System.in);
    void RollNo(){
        System.out.print("Enter Your Admission No. ");
        String admNo = input.nextLine();
    }
}

class ExtendedInformation extends Information{
    @Override // Usage of Override method
    void RollNo(){
        super.RollNo();
        java.util.Scanner input = new java.util.Scanner(System.in);
        System.out.print("Enter Your Class Roll No: ");
        String rollNo = input.nextLine();
    }

    @Deprecated //Usage of Deprecated Annotation
    void Initials(){
        java.util.Scanner input = new java.util.Scanner(System.in);
        System.out.print("Write Name Initials: ");
        String initials = input.next();
    }
}

@FunctionalInterface //Usage of FunctionalInterface annotation
interface makingOfFunctionalInterface{
    void FI();

    // Note if any other method is added to this interface, it would not be a functional interface
}


public class AdvJava_Ch19_20_Annotations {
    // NOTES:

    /* Annotations-
       ~ These provide extra information about the code blocks which we have written.
       ~ It provides metadata to class/methods.

       ~It can sometimes also save from errors
        Ex. We want to override a method, and we put annotation there but upon overriding we mistakenly
            write wrong method_name then the method will not be overridden, hence the Annotation will
            show up an error. And prevents from runtime errors.

       Some annotations are:
       1. @Override: It is used to mark overridden methods in a block of code. [Line 12]
       2. @SuppressWarnings - It is used to suppress the warnings which are generated by the compiler.
          Syntax:
          @SuppressWarnings("Warning_Name");

       3. @Deprecated - If you want to deprecate a method, it is used. [Line 20]

       4. @FunctionalInterface - Marks functional interface being made in a code.
                                 Functional interface are interfaces with only a single method, and it must be abstract method.  */

    @SuppressWarnings( "deprecation" )
    public static void main(String[] args) {
        ExtendedInformation myInfo = new ExtendedInformation();
        myInfo.RollNo();
        myInfo.Initials(); // Deprecated method usage [compiler shows but not in code due to, @SuppressWarnings annotation in line 46
    }

}
